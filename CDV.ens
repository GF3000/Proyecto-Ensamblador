;Autor: Guillermo Franco Gimeno
;Fecha: 9/11/2022

;Macros
LEA: MACRO (reg,ETIQ)
	 or	  reg, r0, low(ETIQ)
	 or.u reg, reg, high(ETIQ)
	 ENDMACRO

DBNZ: MACRO (reg, ETIQ)
		sub	reg, reg, 1
		cmp r2, reg, r0
		bb0 eq, r2, ETIQ
		ENDMACRO

LOAD: MACRO (reg, ETIQ)
		LEA (reg, ETIQ)
		ld reg,reg,r0
		ENDMACRO

PUSH: MACRO (ra)
		subu r30, r30,4
		st ra,r30,r0
		ENDMACRO

POP: MACRO (ra)
		ld ra, r30, 0
		addu r30, r30, 4
		ENDMACRO
;Fin Macros

;Datos
org 100
C1:
    data "_"; pos in cad1 = 0x12 pos cad2 = 0xd
cad1:
    data "123okbXbDvMUGAGcbG_]Nwea_xiOIAtW]fjUtpQxO^DvgbO_anBXI]tgqoEYJpyazVLXOzP_NiTrSHnC[wy`ZZRSD`iUFo^zs^lhwubzggh^UXkcORtMCSF"; long =  0x77
from1: 
    data 0
to1: 
    data 6
cad2:
    data "121`fnZngg^ni_L_kYOfoqGIU[jZHzDXIbhDy[hE`y"; long = 0x2a

cadBuscaMax1:
    data "a-ab-abcabcd"; dev = 5
max1:
    data 8

cadBuscaMax2:
    data "123123"; dev = 0
max2:
    data 3
cadBuscaMax3:
    data "TresTristesTigresEnUnTrigal"; dev = 4
max3:
    data 21
cadBuscaMax4: 
    data "abcdefghijklmnopqrstuvwxyz"; dev =-1
max4:
    data 4
cadBuscaMax5: 
    data " abc abc abc"; dev =1
max5:
    data 9
cadCompresion1:
    data "tres tristes tigres comen trigo en un trigal, el primer tigre que..."

dev:
    data 0x8000
;Fin Datos

;Programas
org 5000
ProgPrincipal:
    or r30, r0, 3000;Inicializamos la pila

    ;bsr TestLongCad
    ;bsr TestBuscaCar
    ;bsr TestBuscaCarHastaFinal
    ;bsr TestCoincidenCar
    ;bsr TestBuscaMax
    bsr TestComprime

    stop
    add r1,r1,r1; BORRAR

;Testers
TestLongCad:
    PUSH(r1);Guardamos retorno

    LEA (r10, cad1)
    PUSH (r10) 
    bsr LongCad
    addu r30, r30, 4;Restauramos pila

    POP(r1)
    jmp(r1);Volvemos a retorno



TestBuscaCar: 
    PUSH(r1);Guardamos dirección de retorno

    LEA(r10, to1)
    ld.bu r10, r10, 0
    PUSH (r10);to

    LEA (r10, from1)
    ld.bu r10, r10, 0
    PUSH (r10);from

    LEA (r10, cad2)
    PUSH (r10);*cadena

    LEA(r10, C1);
    ld.bu r10, r10, 0
    PUSH (r10); C

    bsr BuscaCar
    addu r30, r30, 16;Volvemos al estado de pila anterior
    
    POP(r1);Cogemos la dirección de retorno
    jmp(r1)

TestBuscaCarHastaFinal: 
    PUSH(r1);Guardamos dirección de retorno 
    LEA (r10, cad2)
    PUSH (r10) 
    bsr LongCad
    addu r30, r30, 4;Restauramos pila
    PUSH (r29);to = LongCad(cad1)

    LEA (r10, from1)
    ld.bu r10, r10, 0
    PUSH (r10);from

    LEA (r10, cad2)
    PUSH (r10);*cadena

    LEA(r10, C1);
    ld.bu r10, r10, 0
    PUSH (r10); C

    bsr BuscaCar
    addu r30, r30, 16;Volvemos al estado de pila anterior
    
    POP(r1);Cogemos la dirección de retorno
    jmp(r1)
TestCoincidenCar:
    PUSH(r1)
    
    LEA(r2, cad1)   
    PUSH(r2); Pasamos cad2

    LEA(r2, cad2)
    PUSH(r2); Pasamos cad1

    bsr CoincidenCad
    addu r30, r30, 8; Restauramos pila

    POP(r1)
    jmp (r1)
TestBuscaMax:
    PUSH(r1)

    LOAD(r2, dev)
    PUSH(r2); Pasamos *dev

    LOAD(r2, max5)
    PUSH(r2); Pasamos max

    LEA(r2, cadBuscaMax5)
    PUSH(r2); Pasamos *cad

    bsr BuscaMax
    addu r30, r30, 12;Restauramos pila



    POP(r1)
    jmp(r1)

TestComprime:
    PUSH(r1)

    LOAD(r2, dev)
    PUSH(r2); Pasamos *dev

    LEA(r2, cadCompresion1)
    PUSH(r2); Pasamos *cad

    bsr Comprime
    addu r30, r30, 8
    POP (r1)
    jmp(r1)
;Fin Testers

;LongCad (*cadena) -> r29 = Longitud Cadena
LongCad:
    PUSH(r1);Guardamos la dirección de retorno

    or r29, r0, r0	;Inicializamos el contador de palabras
    ld r10, r30, 4;Cargamos direccion de la cadena

sig_carLC:
    
    ld.bu r4, r10, r29; Cargamos el caracter
    cmp r7, r4, r0; Comparamos el caracter r4 con el caracter de final de linea
    bb1 eq, r7, fin_LongCad; Saltar a fin_LongCad si ha leido el final de linea
    ;Si no lo ha hecho
    addu r29, r29, 1; longitud++
    ;addu r10, r10, 1; El puntero avanza al siguiente caracter
    br sig_carLC;

fin_LongCad:
    POP(r1)
    jmp(r1);Volvemos a dirección de retorno
;Fin LongCad

;BuscaCar (caracter, *cadena, from, to ) -> r29 = Posicion absoluta del caracter en cadena[from, to), to si no aparece
BuscaCar:
    PUSH(r1); Guardamos dirección de retorno

    ld.bu r20, r30, 4;Cargamos C en r20
    ld r21, r30, 8; Cargamos ref en r21
    ld.bu r29, r30, 12; Cargamos from en r29
    ld.bu r23, r30, 16; Cargamos to en r23


sig_carBC:
    ld.bu r4, r21, r29; Cargamos el caracter desde from
    cmp r7, r4, r20; Comparamos caracter actual con caracter buscado
    bb1 eq, r7, fin_BuscaCar;Si caracter encontrado
    addu r29, r29, 1;from++
    cmp r8, r29, r23; Comparamos from y to en r8
    bb1 eq, r8, fin_BuscaCar; Si hemos llegado al final
    br sig_carBC; Comprobamos el siguiente caracter

fin_BuscaCar:
    POP(r1)
    jmp(r1);Volvemos a la dirección de retorno
;Fin BuscaCar

;long = CoincidenCad (*cadena1, *cadena2) -> r29 = nº de caracteres que coinciden desde el primero
CoincidenCad:
    PUSH(r1); Guardamos retorno

    ld r2, r30, 4; Cargamos en r2 dirección cad1
    ld r3, r30, 8; Cargamos en r3 dirección cad2
    or r29, r0, r0; r29 = index = 0

sig_carCC:
    ld.bu r5, r2, r29; r5 = car cad1
    ld.bu r6, r3, r29; r6 = car cad2
    cmp r7, r5, r0;
    bb1 eq, r7, fin_CoincidenCar 
    cmp r7, r5, r6; Comparamos car1 y car2
    bb0 eq, r7,fin_CoincidenCar;Son diferentes
    ;else
    addu r29, r29, 1; index++
    br sig_carCC

fin_CoincidenCar:
    POP(r1)
    jmp(r1);Volvemos a la dirección de retorno
;Fin CoincidenCar



;BuscaMax( *cad, max, *dev ) -> dev = posicion en ref de la cadena con más coincidentes
BuscaMax: 

    PUSH(r1); Guardamos retorno
    PUSH(r31); Guarda puntero de pila llamanante
    or r31, r30, 0;Crea nuevo marco de pila
    sub r30, r30, 12; Reservamos espacio para 3 variables
    st r0, r30, 0; index busca = 0
    st r0, r30, 4; coincidencia max = 0
    st r0,r30, 8; index coincidencia max = 0


sig_BuscaMax:

    ld r8, r30, 0; r8 = index busca
    ld r2, r31, 8; r2 = *cad
    ld r3, r31, 12; r3 = max
    ld.bu r9, r2, r3; r9 = primer caracter subcadena
    ;Guardamos variables locales

    ;BuscaCar (caracter, *cadena, from, to )
    ;BuscaCar (r9, r2, r8, r3)
    PUSH(r3)
    PUSH(r8)
    PUSH(r2)
    PUSH(r9)

    bsr BuscaCar
    addu r30, r30, 16; restauramos pila

    ld.bu r3, r31, 12; r3 = max
    ;if(r29 == r3) -> FIN

    cmp r25, r29, r3
    bb1 eq, r25, fin_BuscaMax

    ld r8, r30, 0; Cargamos r8 desde pila
    ;if (r8 >= 255) -> FIN
    cmp r25, r8, 255
    bb1 ge, r25, fin_BuscaMax
    st r29, r30, 0; Guardamos index busca en pila

    ;Cogemos de las respectivas pilas la informacion para construir los parametros
    ld r8, r30, 0; r8 = index busca
    ld r2, r31, 8; r2 = *cad
    ld.bu r3, r31, 12; r3 = max

    ;Construimos parametros
    add r10, r2, r8;*r10 = *r2 + r8 
    add r6, r2, r3; r6 = subcadena fija

    ;CoincideCad(r6, r10)
    PUSH(r10)
    PUSH(r6);
    bsr CoincidenCad
    add r30, r30, 8; Eliminamos argumentos de pila

    ld r7, r30, 4; r7 = coincidencia max
    ;if (!(r29 > r7)) -> +salta linea
    cmp r25, r29, r7
    bb0 gt, r25, +3
    st r29, r30, 4; Sustutuinmos el nuevo valor de coincidencia max
    st r8, r30, 8; index coincidencia max = index busca

    ;Aumentamos index busca
    ld r8, r30, 0; r8 = index busca
    add r8, r8, 1;r8++
    st r8, r30, 0;index busca = r8

    br sig_BuscaMax
fin_BuscaMax:

    ld r4, r31, 16; r4 = *dev
    ld r8, r30, 8; r8 = index max
    ;sub r8, r8, 1;r8 = -1 
    cmp r7, r29, 0;
    bb0 eq, r7, +2
    subu r8, r8, 1;
    st r8, r4, 0; Guardamos r8 en *dev
    ld r29, r30, 4; Guardamos coincidencia max en r29
    or r30, r31, 0
    POP(r31)
    POP(r1)

    jmp(r1); 
    
;Fin BuscaMax

;Comprime( *texto, *salida) -> r29 longitud de *salida (incluyendo cabecera, vector de bits y vector de caracter) 
Comprime:
    PUSH(r1);en r31 (4)
    PUSH(r31);en r31(0)
    or r31, r30, 0

    ;Reservar Espacio en pila para texto
    ld r2, r31, 8; r2 = *texto
    PUSH(r2)
    bsr LongCad
    add r30, r30, 4; elimianos los parametros de pila
    divu r2, r29, 4	;r2 = r29/4
    mulu r2, r2, 4;
    cmp r7, r2, r29; r29 es multiplo de 4
    bb1 eq,r7, 4; salta 4 lineas 
    subu r2, r29, r2
    or r3, r0, 4
    subu r2, r3, r2
    addu r2, r29, r2
    sub r30, r30,r2; reservamos espacio en pila para texto
    
    ;Reservando Espacio en pila para punteros
    sub r30, r30, 24; Para cuatro punteros, un contador y una variable global
    ;Inicializamos punteros a 0

    ld r3, r31, 8; r3 = *texto  
    st r3, r30, 0; r30(0) = punteroTexto
    st r5, r30, 4; r30(4) = punteroSalida
    st r0, r30, 8; r30(8) = punteroMapaBit
    st r0, r30, 12; r30(12) = punteroPosCadena
    st r0, r30, 16; r30(16) = contador letras pila
    st r29, r30, 20; r30(20) = longitud de la cadena inicial

    ;Copiamos los 8 primeros caracteres
    or r4, r0, 0; en r4 estara el contador
    or r5, r0, 0; en r5 estara el desplazamiento
    bucleCopia:
        cmp r7, r4, 8; Salida del bucle
        bb1 eq, r7, fin_bucleCopia
        ld.bu r6, r3 ,r4; r6 = letra a cargar
        st.b r6, r31, r5; guardamos letra en pila
        addu r4, r4, 1; contador ++
        subu r5, r5, 1; desplazamiento pila ++
        br bucleCopia

    fin_bucleCopia:
    
    or r11, r0, 8
    st r11, r30, 0; r30(0) = punteroTexto = 8
    sub r11, r0, r11; r11 = -8
    st r11, r30, 16; r30(16) = contadaor palabras pila = -8
    or r11, r0, 5
    st r11, r30, 4; r30(4) = punteroSalida
    

    bucleTexto:
        ld.bu r2, r30, 12; punteroPosCadena
        ld.bu r3, r30, 0; punteroTexto
        ;¿Hemos terminado?
        ld r6, r30, 20; r6 = long cad
        cmp r7, r3, r6
        bb1 eq, r7, fin_BucleTexto
        ld r4, r31, 8; *texto

        PUSH(r2)
        PUSH(r3)
        PUSH (r4)
        bsr BuscaMax
        addu r30, r30, 12; restauramos pila
        cmp r7, r29, 3; ¿coincidencia > 4?
        bb1 gt, r7, hay_Compresion
        ;No hay compresión
        ld r3, r31, 8; r3 = *texto
        ld r4, r30, 0; r4 = punteroTexto
        ld r5, r30, 16; r5 = contador letras pila
        ld.bu r6, r3 ,r4; r6 = letra a cargar

        st.b r6, r31, r5; guardamos letra en pila
        ld r20, r30, 8; r30(8) = punteroMapaBit
        set r20, r20, 1<5>; solo queremos escribir un bit
        ld r14, r30, 4; r14 = punteroSalida
        ld r15, r31, 12; salida
        ld.bu r16, r15, r14; cogemos byte del mapa
        P0:
        clr r16, r16,r20; bit correspondiente a 0
        st.b r16, r15, r14; dejamos byte modificado por bit
        addu r20, r20,1; 
        st r20, r30, 8; puntero MapaBit++

        ld r11, r30, 0; r11 = puntero texto
        add r11, r11, 1; puntero texto ++
        st r11, r30, 0; guardamos puntero texto

        ld r5, r30, 16; r5 = contador palabaras pila
        sub r5, r5, 1; contador palabras pila -- (direciones decrecientes)
        st r5, r30, 16;

        cmp r7, r20, 39; 40 = 32 + 7
        bb0 gt, r7, +6
        or r20, r0, 32; Operaciones de campo de bit
        st r20, r30, 8; actualizamos puntero mapa de bit
        ld r15, r30, 4; puntero salida
        addu r15, r15, 1;siguiente byte del mapa
        st r15, r30, 4; actualizamos salidas


        br bucleTexto
    hay_Compresion:
        ld r2, r30, 12;
        ld r2, r2, r0;
        ld r5, r30, 16; r5 = contador palabaras pila
        st.b r2, r31, r5; guardamos letra en pila
        sub r5, r5, 1; contador palabras pila -- (direciones decrecientes)
        st.b r29, r31,r5
        sub r5, r5, 2; contador palabras pila -= 2 (direciones decrecientes)
        st r5, r30, 16;

        ld r11, r30, 0; r11 = puntero texto
        add r11, r11, r29; puntero texto += long
        st r11, r30, 0; guardamos puntero texto
        
        ld r20, r30, 8; r30(8) = punteroMapaBit
        set r20, r20, 1<5>; solo queremos escribir un bit
        ld r14, r30, 4; r14 = punteroSalida
        ld r15, r31, 12; salida
        ld.bu r16, r15, r14; cogemos byte del mapa
        set r16, r16,r20; bit correspondiente a 0
        st.b r16, r15, r14; dejamos byte modificado por bit
        addu r20, r20,1; 
        st r20, r30, 8; puntero MapaBit++
        
        cmp r7, r20, 39; 32 + 7
        bb0 gt, r7, +5
        or r20, r0, 32; Operaciones de campo de bit
        ld r15, r30, 4; puntero salida
        addu r15, r15, 1;siguiente byte del mapa
        st r15, r30, 4; actualizamos puntero salida



        br bucleTexto
    fin_BucleTexto:

    ;Vamos a copiar la pila en memoria destino
    ;En r31

    ld r4, r30, 4; en r4 estara el desplazamiento en salida
    add r4 ,r4,1; desp salida ++
    st r4, r30, 4; guardamos el desplazamiento
    or r5, r0, 0; en r5 estara el desplazamiento en pila
    ld r6, r30, 16; contador de pila

    ld r10, r31, 12; *salida
    bucleCopia2:
        cmp r7, r5, r6; Salida del bucle
        bb1 eq, r7, fin_2bucleCopia
        ld.bu r7, r31 ,r5; r6 = letra a cargar
        st.b r7, r10, r4; guardamos letra salida
        addu r4, r4, 1; desp salida ++
        subu r5, r5, 1; desplazamiento pila ++
        br bucleCopia2

    fin_2bucleCopia:
    
    ;Vamos a contruir la cabecera
    ld r2, r31, 12; *salida
    ld r3, r30, 20; r3 = long cadena
    st.h r3, r2, 0
    or r3, r0, 0x01
    st.b r3, r2, 2
    add r3, r4, 5;
    ld r3, r30, 4; en r3 estara el desplazamiento en salida
    st.b r3, r2,3;
    stop
fin_Comprime:
    POP(r31)
    POP(r1)
    jmp(r1)
;Fin Comprime
Descomprime: jmp(r1)
Verifica: jmp (r1)